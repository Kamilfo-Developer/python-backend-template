# Here are presented rules you should follow no matter what. If you don't follow these rules, you completely fail

## Write for every change you make either a unit-test or an intergation test

## Use the lates Python syntax available. E.g. use Type | None instead of Optional, use list[Type] instead of List[Type], etc

## Folder structure logic

### app

- Includes the main app.py file and all the subdirectories
- Inlcudes types.py file. It contains reusable types of the project

### app/cli

- Includes all logic related to CLI

### app/core

- Includes all project domain logic and interfaces
- Includes the config file

### app/core/api_clients

- Includes API Clients for making HTTP-requestss, calling Message Brokers queues, etc.

### app/core/entities

- Includes all entities with the business logic
- Entities and DTOs ARE DIFFERENT
- The business logic should be encapsulated in entities methods

### app/core/enums

- Includes all the enums in the project. All enums should be inherited from BaseEnum from the app/lib/enums/base.py file

### app/core/exceptions

- Includes all project exceptions
- All base exceptions for each domain should be inherited from the AbstractException from app/lib/exceptions/base.py
- All domain exceptions should be inherited from the base exception of a specific domain

### app/core/queries

- Includes interfaces for all project DB queries
- DB queries and repositories ARE DIFFERENT
- DB queries are the queries which can return DTOs or just do an action in the DB. For example, queries can be used for creating basic CRUD

### app/core/repositories

- Includes interfaces for all project DB repositories
- DB queries and repositories ARE DIFFERENT
- DB repositories can use entities only
- Repositories use the Specification pattern located in the app/lib/utils/specification.py for the queries which can use filters. For example, get_users can accept a Specification object.

### app/dependencies

- Includes all dependencies logic
- Dependency Injection is implemented using the Dishka framework
- All dependencies MUST be located in the AppProvider class of the app/dependencies/providers.py file

### app/implementations

- Includes all the implementations of the interfaces delcared in app/core folders
  
### app/lib

- Includes utils
- This folder can be reused across project so, if you edit it, keep it clean and providing as much documentation as possible

### app/models

- Includes DB models for any DB framework. For example, models for SQLAlchemy

### app/routers

- Includes all framework routes of the application. For example, it can include routes for FastAPI or aiogram.
- All routes for web-framework like FastAPI should be located in special version folder, e.g. v1, v2, etc.

### app/schemas

- Includes all schemas of the applicatoin. For example, Pydantic schemas

### app/services

- Includes logic related to the Application layer of the app. Application layer should call repositories, API clients, queries, use entities for doing business logic, etc.
